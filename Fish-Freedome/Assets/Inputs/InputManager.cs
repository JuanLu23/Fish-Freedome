//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Player_Actions"",
            ""id"": ""e3d253ff-b448-4a31-bc61-d0c370ad2082"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""8b0d0a1f-3803-4664-9f94-852fe4272586"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ArrowRotation"",
                    ""type"": ""Button"",
                    ""id"": ""7dafed04-5f3d-4e12-8edc-f48ddd37af40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a998d907-60cd-4793-9728-71850be7c5e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""78252a15-9099-4a92-a5b7-31d4f9d48fbd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""3014601d-71b3-4dce-a951-ff46a2c5e9d5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0814193a-5dd9-4379-9c38-5863e0bff467"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8e145630-62a6-4b1d-848e-1d8f86c88496"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""301fde34-b230-4ac9-83e5-0c70c44ccdf5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""67efed1e-3f21-48c6-936a-9de7faf19063"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""fda084f6-1920-416d-a62f-ab0cc5a8544f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""e2d28472-8198-42cd-b772-546ed0b15e9b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""57608c15-5950-46c9-8e4d-954d64802531"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""7b156230-76c8-49d7-9caa-709b8cddc7ac"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e4179d73-a792-4757-8714-5b7f0063a47a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_Actions"",
            ""id"": ""16db13cc-611e-42ff-ab8a-72391fd89a95"",
            ""actions"": [
                {
                    ""name"": ""Pause_Game"",
                    ""type"": ""Button"",
                    ""id"": ""75a5020f-bcef-4bf5-b7c9-eb12adc8505a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c8a37f1-2a8f-4fd8-bd98-bf3664f31116"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause_Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Actions
        m_Player_Actions = asset.FindActionMap("Player_Actions", throwIfNotFound: true);
        m_Player_Actions_PlayerMovement = m_Player_Actions.FindAction("PlayerMovement", throwIfNotFound: true);
        m_Player_Actions_ArrowRotation = m_Player_Actions.FindAction("ArrowRotation", throwIfNotFound: true);
        m_Player_Actions_Jump = m_Player_Actions.FindAction("Jump", throwIfNotFound: true);
        // UI_Actions
        m_UI_Actions = asset.FindActionMap("UI_Actions", throwIfNotFound: true);
        m_UI_Actions_Pause_Game = m_UI_Actions.FindAction("Pause_Game", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Actions
    private readonly InputActionMap m_Player_Actions;
    private IPlayer_ActionsActions m_Player_ActionsActionsCallbackInterface;
    private readonly InputAction m_Player_Actions_PlayerMovement;
    private readonly InputAction m_Player_Actions_ArrowRotation;
    private readonly InputAction m_Player_Actions_Jump;
    public struct Player_ActionsActions
    {
        private @InputManager m_Wrapper;
        public Player_ActionsActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_Player_Actions_PlayerMovement;
        public InputAction @ArrowRotation => m_Wrapper.m_Player_Actions_ArrowRotation;
        public InputAction @Jump => m_Wrapper.m_Player_Actions_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Player_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_ActionsActions instance)
        {
            if (m_Wrapper.m_Player_ActionsActionsCallbackInterface != null)
            {
                @PlayerMovement.started -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.performed -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.canceled -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnPlayerMovement;
                @ArrowRotation.started -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnArrowRotation;
                @ArrowRotation.performed -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnArrowRotation;
                @ArrowRotation.canceled -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnArrowRotation;
                @Jump.started -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_ActionsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_Player_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerMovement.started += instance.OnPlayerMovement;
                @PlayerMovement.performed += instance.OnPlayerMovement;
                @PlayerMovement.canceled += instance.OnPlayerMovement;
                @ArrowRotation.started += instance.OnArrowRotation;
                @ArrowRotation.performed += instance.OnArrowRotation;
                @ArrowRotation.canceled += instance.OnArrowRotation;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public Player_ActionsActions @Player_Actions => new Player_ActionsActions(this);

    // UI_Actions
    private readonly InputActionMap m_UI_Actions;
    private IUI_ActionsActions m_UI_ActionsActionsCallbackInterface;
    private readonly InputAction m_UI_Actions_Pause_Game;
    public struct UI_ActionsActions
    {
        private @InputManager m_Wrapper;
        public UI_ActionsActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause_Game => m_Wrapper.m_UI_Actions_Pause_Game;
        public InputActionMap Get() { return m_Wrapper.m_UI_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IUI_ActionsActions instance)
        {
            if (m_Wrapper.m_UI_ActionsActionsCallbackInterface != null)
            {
                @Pause_Game.started -= m_Wrapper.m_UI_ActionsActionsCallbackInterface.OnPause_Game;
                @Pause_Game.performed -= m_Wrapper.m_UI_ActionsActionsCallbackInterface.OnPause_Game;
                @Pause_Game.canceled -= m_Wrapper.m_UI_ActionsActionsCallbackInterface.OnPause_Game;
            }
            m_Wrapper.m_UI_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause_Game.started += instance.OnPause_Game;
                @Pause_Game.performed += instance.OnPause_Game;
                @Pause_Game.canceled += instance.OnPause_Game;
            }
        }
    }
    public UI_ActionsActions @UI_Actions => new UI_ActionsActions(this);
    public interface IPlayer_ActionsActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnArrowRotation(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IUI_ActionsActions
    {
        void OnPause_Game(InputAction.CallbackContext context);
    }
}
